#!/bin/sh -eux

REPO_NAME=${1:?"The name of the parent repo"}
SUB_PROJECT_NAME=${2:?"The name of the subproject"}
PROJECT_MAINTAINER=${3:?"Name of the maintainer"}
PROJECT_DESCRIPTION=${4:?"Short one-liner description for project"}
ROOT_NAMESPACE=${5:?"Root namespace for the modules"}

YEAR=$(TZ=UTC date +"%Y")
SRC_ROOT=$(echo "${ROOT_NAMESPACE}" | tr '.' '/')

mkdir -p "${SUB_PROJECT_NAME}"

cd "${SUB_PROJECT_NAME}"

mkdir -p "etc"

ln -sf ../framework/mafia .

tee "${SUB_PROJECT_NAME}".cabal << EOF
name:               ${SUB_PROJECT_NAME}
version:            0.0.1
license:            BSD3
license-file:       etc/LICENCE.md
author:             ${PROJECT_MAINTAINER}
maintainer:         ${PROJECT_MAINTAINER}
copyright:          Copyright (C) ${YEAR}
synopsis:           ${PROJECT_DESCRIPTION}
category:           Data
description:        ${PROJECT_DESCRIPTION}
homepage:           https://github.com/domdere/${REPO_NAME}
bug-reports:        https://github.com/domdere/${REPO_NAME}/issues
cabal-version:      >= 1.18
build-type:         Simple

source-repository       head
    type:               git
    location:           https://github.com/domdere/${REPO_NAME}.git

flag                    small_base
    description:        Choose the new, split-up base package.

library
    default-language:   Haskell2010

    build-depends:      array
                      , base < 5 && >= 4
                      , bytestring              == 0.10.*
                      , containers
                      , domdere-preamble
                      , ultra-either
                      , ultra-text

    ghc-options:        -Wall

    hs-source-dirs:     src

    exposed-modules:    ${ROOT_NAMESPACE}.Core

test-suite              test
    default-language:   Haskell2010
    type:               exitcode-stdio-1.0
    main-is:            test.hs
    hs-source-dirs:     test
    build-depends:      base                >= 4 && < 5
                    ,   lab-core
                    ,   domdere-preamble
                    ,   ${SUB_PROJECT_NAME}
EOF

tee ".ghci" << EOF
:set -isrc
:set prompt ">> "
:set -Wall
:set -XOverloadedStrings
EOF

mkdir -p test

tee "test/test.hs" << EOF
module Main where

import Lab.Core.Main

import Preamble

main :: IO ()
main = labMain
    [
    ]
EOF

mkdir -p "src/${SRC_ROOT}"

tee "src/${SRC_ROOT}/Core.hs" << EOF
{-# LANGUAGE NoImplicitPrelude #-}
-------------------------------------------------------------------
-- |
-- Module       : ${ROOT_NAMESPACE}.Core
-- Copyright    : (C) ${YEAR}
-- License      : BSD-style (see the file etc/LICENSE.md)
-- Maintainer   : ${PROJECT_MAINTAINER}
--
-------------------------------------------------------------------
module ${ROOT_NAMESPACE}.Core where
EOF

cd ../
